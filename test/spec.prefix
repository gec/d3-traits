'use strict';

/*global window */

describe('d3-traits', function() {
//  var elm, scope, isolatedScope;

    // Usage:
    //  chartDiv = makeChartDiv()
    //  window.document.body.appendChild( chartDiv)
    //
    function makeChartDiv() {
        var chartDiv = document.createElement( 'div' )
        chartDiv.className = "chart-div"
        chartDiv.setAttribute( "style", "width: 300px; height: 200px; margin: 0; padding: 0; border: 0")
        chartDiv.setAttribute( "width", "300")
        chartDiv.setAttribute( "height", "200")

        return chartDiv
    }

//  beforeEach(inject(function($rootScope, $compile) {
//    elm = angular.element('<div id="toto">' +
//      '<linechart data="data" options="options"></linechart>' +
//      '</div>');
//
//    scope = $rootScope;
//    $compile(elm)(scope);
//    scope.$digest();
//  }));

  beforeEach(function() {
    this.addMatchers({
      toBeSameStyleAs: function(expected) {
        var actual = this.actual;
        var notText = this.isNot ? " not" : "";

        this.message = function () {
          return "Expected " + actual + notText + " to be same as " + expected;
        };

        var exp = expected.split(/\s*;\s*/g);
        var comp = actual.split(/\s*;\s*/g);

        var colors = ['fill', 'stroke'];

        for (var key in exp) {
          if (comp[key] === undefined) {
            return false;
          }

          if (comp[key] !== exp[key]) {
            var spl = comp[key].split(/\s*:\s*/);
            var expSpl = exp[key].split(/\s*:\s*/);

            if (colors.indexOf(spl[0]) !== -1) {
              if (d3.rgb(spl[1]).toString() !== d3.rgb(expSpl[1]).toString()) {
                return false;
              }
            } else {
              return false;
            }
          }
        }

        return true;
      }
    });
  });
